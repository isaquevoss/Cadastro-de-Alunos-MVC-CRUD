unit uAlunoDao;

interface

uses uAlunoModel, System.Generics.Collections, Data.DB, uDao;

type

  TAlunoDao = class
  private
    function select(where: string) : TDataSet;
  public
    procedure delete(aluno: TAluno);
    procedure save(aluno: TAluno);
    function find(_id: integer) : TAluno;
    function get(_conditions: TList<TCondition> = nil; order: TList<TOrderby> = nil) : TList<TAluno>;


  end;

  var
    AlunoDao: TAlunoDao;

implementation

  uses
    uDb, FireDAC.Comp.Client, System.SysUtils;


procedure TAlunoDao.delete(aluno: TAluno);
var
  qr: TFDQuery;
begin
  _db.instanceQuery(qr);
  try
    qr.SQL.Add('delete from alunos where id = :id');
    qr.ParamByName('id').AsInteger := aluno.id;
    qr.ExecSQL();
  finally
    qr.Free();
  end;

end;



function TAlunoDao.find(_id: integer): TAluno;
var
  ds: TDataSet;
begin
  ds := select('id = '+IntToStr(_id));


end;

function TAlunoDao.get(_conditions: TList<TCondition> = nil; order: TList<TOrderby> = nil) : TList<TAluno>;
begin

end;

procedure TAlunoDao.save(aluno: TAluno);
var
  qr: TFDQuery;
begin
  _db.instanceQuery(qr);
  try
    qr.SQL.Add
      ('insert or replace into alunos(id,nome,sobrenome,turma,data_nascimento) values(:id,:nome,:sobrenome,:turma,:data_nascimento);');
    qr.ParamByName('id').AsInteger := aluno.id;
    qr.ParamByName('nome').AsString := aluno.nome;
    qr.ParamByName('sobrenome').AsString := aluno.sobrenome;
    qr.ParamByName('turma').AsString := aluno.turma;
    qr.ParamByName('data_nascimento').AsDate := aluno.data_nascimento;
    qr.ExecSQL();
  finally
    qr.Free();
  end;

end;

function TAlunoDao.select(where: string): TDataSet;
begin

end;

end.
